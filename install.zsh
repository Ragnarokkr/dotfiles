#!/usr/bin/env bash

# Installer for .dotfiles

#
# UTILS
#

get_distro() {
	echo $(. /etc/os-release; echo $ID)
}

make_dotfilesrc() {
	local dotfilesrc=$HOME/.dotfilesrc

	echo "Generating $dotfilesrc file"

	echo -e "# Automatically generated by .dotfiles installer.\n# Do NOT edit manually, all changes will be lost.\n" > $dotfilesrc
	echo "export DOTFILES_HOME=$(pwd)" >> $dotfilesrc
}

check_packages() {
	if [[ ! -f $DOTFILES_HOME/packages.list ]]; then
		echo -e "\nERROR: cannot find the file package.list into $DOTFILES_HOME directory"
		echo -e "\nPlease create the file $DOTFILES_HOME/package.list and add one package per row"
		echo -e "with the format:\n"
		echo -e "\tpackager:package"
		echo -e "\tpackager:package:command"
		echo -e "\tpackager:package:dir_path\n"
		return 1
	fi
}

install_dotfiles() {
	echo "Installing .dotfiles"

	for dotfile in $DOTFILES_HOME/zsh/*; do	
		[[ -f $dotfile ]] \
			&& ln -sfv $dotfile $HOME/.$(basename $dotfile)
	done

	return 0
}

install_config() {
	echo "Installing configuration files"
	
	for config in $DOTFILES_HOME/config/*; do
		[[ -e $config ]] && [[ $config != *"git"* ]] \
			&& [[ ! -e $HOME/.config/$(basename $config) ]] \
			&& ln -sfv $config $HOME/.config/$(basename $config)
	done

	# The .gitconfig file contains only global non-sensitive data.
	# To prevent it from triggering the modified status in git repo,
	# the directory is hard linked so that further addings of
	# sensitive data aren't published in repo.
	[[ ! -e $HOME/.config/git ]] \
		&& cp -rv $DOTFILES_HOME/config/git $HOME/.config

	return 0
}

install_private() {
	echo "Installing private files"
	
	for config in $DOTFILES_HOME/private/config/*; do
		[[ -e $config ]] \
			&& [[ ! -e $HOME/.config/$(basename $config) ]] \
			&& ln -sfv $config $HOME/.config/$(basename $config)
	done

	return 0
}

install_commands() {
	echo "Installing user commands"

	[[ -d $DOTFILES_HOME/local/bin ]] \
		&& [[ ! -e $HOME/.local/bin ]] \
		&& ln -sfv $DOTFILES_HOME/local/bin $HOME/.local/bin

	return 0
}

install_nix() {
	echo "Installing Nix Package Manager"

	[[ -z $(command -v nix) ]] \
		&& sh <(curl -L https://nixos.org/nix/install) --daemon \
		&& nix-channel --add https://nixos.org/channels/nixpkgs-unstable \
		&& nix-channel --update

	return 0
}

install_system_commands() {
	echo "Installing packages"

	for package in $(cat $DOTFILES_HOME/packages.list); do
		local pkgManager=$(echo $package | cut -d ':' -f 1)
		local pkgName=$(echo $package | cut -d ':' -f 2)
		local pkgCmd=$(echo $package | cut -d ':' -f 3)

		case $pkgManager in 
			pacman)
				if [[ -n $(command -v pacman) ]]; then
					local pkgInstall="sudo pacman -Su $pkgName"
				else
					local pkgInstall=""
				fi
				;;
			nix)
				if [[ -n $(command -v nix-env) ]]; then 
					local pkgInstall="nix-env -iA nixpkgs.$pkgName"
				else
					local pkgInstall=""
				fi
				;;
		esac

		if [[ -z $pkgCmd ]]; then
			pkgCmd=$pkgName
		fi	

		if [[ $pkgCmd = *"/"* ]]; then			
			[[ ! -d $pkgCmd ]] && $pkgInstall
		elif [[ -z $(command -v $pkgCmd) ]]; then
			$pkgInstall
		fi
	done

	return 0
}

aux_setup() {
	echo "Running auxiliary setups"

	for setup in $DOTFILES_HOME/setup/**; do
		[[ -x $setup ]] && "$setup"
	done

	return 0
}


#
# SETUP
#

make_dotfilesrc
source $HOME/.dotfilesrc

check_packages

install_dotfiles
install_config
install_private
install_commands
install_nix
install_system_commands

aux_setup
